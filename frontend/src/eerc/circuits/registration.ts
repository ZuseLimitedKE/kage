/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import {
  CircuitZKit,
  CircuitZKitConfig,
  Groth16Proof,
  PlonkProof,
  Groth16ProofPoints,
  PlonkProofPoints,
  NumberLike,
  NumericString,
  PublicSignals,
  Groth16Implementer,
  PlonkImplementer,
} from "@solarity/zkit";

import { normalizePublicSignals, denormalizePublicSignals } from "../helpers";

export type PrivateRegistrationCircuitGroth16 = {
  SenderPrivateKey: NumberLike;
  SenderPublicKey: NumberLike[];
  SenderAddress: NumberLike;
  ChainID: NumberLike;
  RegistrationHash: NumberLike;
};

export type PublicRegistrationCircuitGroth16 = {
  SenderPublicKey: NumberLike[];
  SenderAddress: NumberLike;
  ChainID: NumberLike;
  RegistrationHash: NumberLike;
};

export type ProofRegistrationCircuitGroth16 = {
  proof: Groth16Proof;
  publicSignals: PublicRegistrationCircuitGroth16;
};

export type CalldataRegistrationCircuitGroth16 = {
  proofPoints: Groth16ProofPoints;
  publicSignals: [
    NumericString,
    NumericString,
    NumericString,
    NumericString,
    NumericString,
  ];
};

export class RegistrationCircuit extends CircuitZKit<"groth16"> {
  constructor(config: CircuitZKitConfig) {
    super(config, new Groth16Implementer());
  }

  public async generateProof(
    inputs: PrivateRegistrationCircuitGroth16,
  ): Promise<ProofRegistrationCircuitGroth16> {
    const proof = await super.generateProof(inputs as any);

    return {
      proof: proof.proof,
      publicSignals: this._normalizePublicSignals(proof.publicSignals),
    };
  }

  public async calculateWitness(
    inputs: PrivateRegistrationCircuitGroth16,
  ): Promise<bigint[]> {
    return super.calculateWitness(inputs as any);
  }

  public async verifyProof(
    proof: ProofRegistrationCircuitGroth16,
  ): Promise<boolean> {
    return super.verifyProof({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public async generateCalldata(
    proof: ProofRegistrationCircuitGroth16,
  ): Promise<CalldataRegistrationCircuitGroth16> {
    return super.generateCalldata({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public getSignalNames(): string[] {
    return ["SenderPublicKey", "SenderAddress", "ChainID", "RegistrationHash"];
  }

  public getSignalDimensions(name: string): number[] {
    switch (name) {
      case "SenderPublicKey":
        return [2];
      case "SenderAddress":
        return [];
      case "ChainID":
        return [];
      case "RegistrationHash":
        return [];
      default:
        throw new Error(`Unknown signal name: ${name}`);
    }
  }

  private _normalizePublicSignals(
    publicSignals: PublicSignals,
  ): PublicRegistrationCircuitGroth16 {
    return normalizePublicSignals(
      publicSignals,
      this.getSignalNames(),
      this.getSignalDimensions,
    );
  }

  private _denormalizePublicSignals(
    publicSignals: PublicRegistrationCircuitGroth16,
  ): PublicSignals {
    return denormalizePublicSignals(publicSignals, this.getSignalNames());
  }
}

export default RegistrationCircuit;
